const CHIP8_RAM_SIZE: usize = 4096;
const CHIP8_RAM_OFFSET: usize = 0x200;
const SPRITE: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, /* 0 */
    0x20, 0x60, 0x20, 0x20, 0x70, /* 1 */
    0xF0, 0x10, 0xF0, 0x80, 0xF0, /* 2 */
    0xF0, 0x10, 0xF0, 0x10, 0xF0, /* 3 */
    0x90, 0x90, 0xF0, 0x10, 0x10, /* 4 */
    0xF0, 0x80, 0xF0, 0x10, 0xF0, /* 5 */
    0xF0, 0x80, 0xF0, 0x90, 0xF0, /* 6 */
    0xF0, 0x10, 0x20, 0x40, 0x40, /* 7 */
    0xF0, 0x90, 0xF0, 0x90, 0xF0, /* 8 */
    0xF0, 0x90, 0xF0, 0x10, 0xF0, /* 9 */
    0xF0, 0x90, 0xF0, 0x90, 0x90, /* a */
    0xE0, 0x90, 0xE0, 0x90, 0xE0, /* b */
    0xF0, 0x80, 0x80, 0x80, 0xF0, /* c */
    0xE0, 0x90, 0x90, 0x90, 0xE0, /* d */
    0xF0, 0x80, 0xF0, 0x80, 0xF0, /* e */
    0xF0, 0x80, 0xF0, 0x80, 0x80, /* f */
];
pub type Mem = [u8; CHIP8_RAM_SIZE];

pub struct Memory {
    memory: Mem,
}

impl Memory {
    pub fn new() -> Memory {
        let mut memory = [0; CHIP8_RAM_SIZE];

        for (i, value) in SPRITE.iter().enumerate() {
            memory[i] = *value;
        }

        Memory { memory }
    }

    pub fn get_memory(&mut self) -> Mem {
        self.memory
    }

    //----------
    //more functions to be implemented
}
