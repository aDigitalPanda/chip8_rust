{"message":"failed to resolve: could not find `unix` in `os`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":85,"byte_end":89,"line_start":3,"line_end":3,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"use std::os::unix::io::AsRawFd;","highlight_start":14,"highlight_end":18}],"label":"could not find `unix` in `os`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: could not find `unix` in `os`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs:3:14\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse std::os::unix::io::AsRawFd;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `unix` in `os`\u001b[0m\n\n"}
{"message":"unresolved import `nix::ioctl_write_int_bad`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":16,"byte_end":35,"line_start":1,"line_end":1,"column_start":17,"column_end":36,"is_primary":true,"text":[{"text":"use nix::{self, ioctl_write_int_bad};","highlight_start":17,"highlight_end":36}],"label":"no `ioctl_write_int_bad` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `nix::ioctl_write_int_bad`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs:1:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse nix::{self, ioctl_write_int_bad};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `ioctl_write_int_bad` in the root\u001b[0m\n\n"}
{"message":"unresolved import `nix::Error`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":143,"byte_end":153,"line_start":6,"line_end":6,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"pub use nix::Error;","highlight_start":9,"highlight_end":19}],"label":"no `Error` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `nix::Error`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs:6:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub use nix::Error;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Error` in the root\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `ioctl_write_int_bad`","code":null,"level":"error","spans":[{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":466,"byte_end":485,"line_start":20,"line_end":20,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"ioctl_write_int_bad!(kiocsound, KIOCSOUND);","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot determine resolution for the macro `ioctl_write_int_bad`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs:20:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mioctl_write_int_bad!(kiocsound, KIOCSOUND);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot find type `Result` in crate `nix`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":879,"byte_end":885,"line_start":39,"line_end":39,"column_start":33,"column_end":39,"is_primary":true,"text":[{"text":"pub fn beep(hertz: u16) -> nix::Result<()>","highlight_start":33,"highlight_end":39}],"label":"not found in `nix`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":"use core::fmt::Result;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":"use core::result::Result;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":"use std::fmt::Result;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":"use std::io::Result;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":"use std::result::Result;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":"use std::thread::Result;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find type `Result` in crate `nix`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs:39:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub fn beep(hertz: u16) -> nix::Result<()>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `nix`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse core::fmt::Result;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse core::result::Result;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse std::fmt::Result;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse std::io::Result;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     and 2 other candidates\u001b[0m\n\n"}
{"message":"cannot find function `kiocsound` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":1011,"byte_end":1020,"line_start":45,"line_end":45,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        kiocsound(DEVICE.as_raw_fd(), period_in_clock_cycles as i32)?;","highlight_start":9,"highlight_end":18}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find function `kiocsound` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs:45:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        kiocsound(DEVICE.as_raw_fd(), period_in_clock_cycles as i32)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"no method named `as_raw_fd` found for struct `DEVICE` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lazy_static-1.4.0\\src\\lib.rs","byte_start":4632,"byte_end":4641,"line_start":159,"line_end":159,"column_start":18,"column_end":27,"is_primary":false,"text":[{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":18,"highlight_end":27}],"label":"method `as_raw_fd` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lazy_static-1.4.0\\src\\lib.rs","byte_start":3547,"byte_end":3611,"line_start":128,"line_end":128,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lazy_static-1.4.0\\src\\lib.rs","byte_start":4996,"byte_end":5069,"line_start":170,"line_end":170,"column_start":9,"column_end":82,"is_primary":false,"text":[{"text":"        __lazy_static_internal!($(#[$attr])* () static ref $N : $T = $e; $($t)*);","highlight_start":9,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":283,"byte_end":464,"line_start":12,"line_end":18,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"lazy_static! {","highlight_start":1,"highlight_end":15},{"text":"    static ref DEVICE: File =","highlight_start":1,"highlight_end":30},{"text":"        OpenOptions::new()","highlight_start":1,"highlight_end":27},{"text":"            .append(true)","highlight_start":1,"highlight_end":26},{"text":"            .open(FILE)","highlight_start":1,"highlight_end":24},{"text":"            .expect(&format!(\"Could not open {}\", FILE));","highlight_start":1,"highlight_end":58},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"lazy_static!","def_site_span":{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lazy_static-1.4.0\\src\\lib.rs","byte_start":4805,"byte_end":5464,"line_start":167,"line_end":179,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! lazy_static {","highlight_start":1,"highlight_end":27},{"text":"    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":78},{"text":"        // use `()` to explicitly forward the information about private items","highlight_start":1,"highlight_end":78},{"text":"        __lazy_static_internal!($(#[$attr])* () static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":82},{"text":"        __lazy_static_internal!($(#[$attr])* (pub) static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":96},{"text":"        __lazy_static_internal!($(#[$attr])* (pub ($($vis)+)) static ref $N : $T = $e; $($t)*);","highlight_start":1,"highlight_end":96},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"__lazy_static_internal!","def_site_span":{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lazy_static-1.4.0\\src\\lib.rs","byte_start":3259,"byte_end":4767,"line_start":124,"line_end":164,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __lazy_static_internal {","highlight_start":1,"highlight_end":38},{"text":"    // optional visibility restrictions are wrapped in `()` to allow for","highlight_start":1,"highlight_end":73},{"text":"    // explicitly passing otherwise implicit information about private items","highlight_start":1,"highlight_end":77},{"text":"    ($(#[$attr:meta])* ($($vis:tt)*) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":92},{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":1,"highlight_end":73},{"text":"        __lazy_static_internal!(@TAIL, $N : $T = $e);","highlight_start":1,"highlight_end":54},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@TAIL, $N:ident : $T:ty = $e:expr) => {","highlight_start":1,"highlight_end":45},{"text":"        impl $crate::__Deref for $N {","highlight_start":1,"highlight_end":38},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            fn deref(&self) -> &$T {","highlight_start":1,"highlight_end":37},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":50},{"text":"                    __lazy_static_create!(LAZY, $T);","highlight_start":1,"highlight_end":53},{"text":"                    LAZY.get(__static_ref_initialize)","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                __stability()","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $crate::LazyStatic for $N {","highlight_start":1,"highlight_end":41},{"text":"            fn initialize(lazy: &Self) {","highlight_start":1,"highlight_end":41},{"text":"                let _ = &**lazy;","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // `vis` is wrapped in `()` to prevent parsing ambiguity","highlight_start":1,"highlight_end":61},{"text":"    (@MAKE TY, $(#[$attr:meta])*, ($($vis:tt)*), $N:ident) => {","highlight_start":1,"highlight_end":64},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":1,"highlight_end":49},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        $($vis)* static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"__lazy_static_internal!","def_site_span":{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lazy_static-1.4.0\\src\\lib.rs","byte_start":3259,"byte_end":4767,"line_start":124,"line_end":164,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __lazy_static_internal {","highlight_start":1,"highlight_end":38},{"text":"    // optional visibility restrictions are wrapped in `()` to allow for","highlight_start":1,"highlight_end":73},{"text":"    // explicitly passing otherwise implicit information about private items","highlight_start":1,"highlight_end":77},{"text":"    ($(#[$attr:meta])* ($($vis:tt)*) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => {","highlight_start":1,"highlight_end":92},{"text":"        __lazy_static_internal!(@MAKE TY, $(#[$attr])*, ($($vis)*), $N);","highlight_start":1,"highlight_end":73},{"text":"        __lazy_static_internal!(@TAIL, $N : $T = $e);","highlight_start":1,"highlight_end":54},{"text":"        lazy_static!($($t)*);","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@TAIL, $N:ident : $T:ty = $e:expr) => {","highlight_start":1,"highlight_end":45},{"text":"        impl $crate::__Deref for $N {","highlight_start":1,"highlight_end":38},{"text":"            type Target = $T;","highlight_start":1,"highlight_end":30},{"text":"            fn deref(&self) -> &$T {","highlight_start":1,"highlight_end":37},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __static_ref_initialize() -> $T { $e }","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                #[inline(always)]","highlight_start":1,"highlight_end":34},{"text":"                fn __stability() -> &'static $T {","highlight_start":1,"highlight_end":50},{"text":"                    __lazy_static_create!(LAZY, $T);","highlight_start":1,"highlight_end":53},{"text":"                    LAZY.get(__static_ref_initialize)","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                __stability()","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $crate::LazyStatic for $N {","highlight_start":1,"highlight_end":41},{"text":"            fn initialize(lazy: &Self) {","highlight_start":1,"highlight_end":41},{"text":"                let _ = &**lazy;","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // `vis` is wrapped in `()` to prevent parsing ambiguity","highlight_start":1,"highlight_end":61},{"text":"    (@MAKE TY, $(#[$attr:meta])*, ($($vis:tt)*), $N:ident) => {","highlight_start":1,"highlight_end":64},{"text":"        #[allow(missing_copy_implementations)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":39},{"text":"        #[allow(dead_code)]","highlight_start":1,"highlight_end":28},{"text":"        $(#[$attr])*","highlight_start":1,"highlight_end":21},{"text":"        $($vis)* struct $N {__private_field: ()}","highlight_start":1,"highlight_end":49},{"text":"        #[doc(hidden)]","highlight_start":1,"highlight_end":23},{"text":"        $($vis)* static $N: $N = $N {__private_field: ()};","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    () => ()","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs","byte_start":1028,"byte_end":1037,"line_start":45,"line_end":45,"column_start":26,"column_end":35,"is_primary":true,"text":[{"text":"        kiocsound(DEVICE.as_raw_fd(), period_in_clock_cycles as i32)?;","highlight_start":26,"highlight_end":35}],"label":"method not found in `DEVICE`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `as_raw_fd` found for struct `DEVICE` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\le4gu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\beep-0.3.0\\src\\lib.rs:45:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mlazy_static! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static ref DEVICE: File =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OpenOptions::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .append(true)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .open(FILE)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .expect(&format!(\"Could not open {}\", FILE));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mmethod `as_raw_fd` not found for this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        kiocsound(DEVICE.as_raw_fd(), period_in_clock_cycles as i32)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `DEVICE`\u001b[0m\n\n"}
{"message":"aborting due to 7 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 7 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0412, E0425, E0432, E0433, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0412, E0425, E0432, E0433, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0412`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0412`.\u001b[0m\n"}
